clc
clear
N=3000;    % number of sample data
dB=16;     % Signal to noise ratio(dB)
L=7; 
ChL=1;  % length of the channel= ChL+1
EqD=round((L+ChL)/2);  %  channel equalization delay

j=sqrt(-1);
%Ch=randn(1,ChL+1)+sqrt(-1)*randn(1,ChL+1);   % complex channel

%Ch=[0.0545+j*0.05 .2832-.1197*j -.7676+.2788*j -.0641-.0576*j .0566-.2275*j .4063-.0739*j];
 %Ch=[0.8+j*0.1 .9-j*0.2]; %complex channel
  b=[0.7 -1]; a=[1 -0.7];
%Ch=[-0.0423    0.0132]; % good channel

b=b/norm(b);% normalize
a=a/norm(a);% normalize
%mse=zeros(1,iter);
 %[z1,p,k]=tf2zp(Ch,ones(1,ChL+1)); 
 [z1,p,k]=tf2zp(b,a); 
mu=1.5e-2; 
z=5;
MMM=1000;
err=zeros(1,N-L);
e=zeros(1,N-L);

   for k=1:MMM  
%% Data Generation 
TxS=round(rand(1,N))*2-1;  % QPSK symbols are transmitted symbols
TxS=TxS+sqrt(-1)*(round(rand(1,N))*2-1);
%x=filter(Ch,1,TxS); %channel distortion
x=filter(b,a,TxS); %channel distortion
n=randn(1,N)+sqrt(-1)*randn(1,N);   % additive white gaussian noise (complex)
 n=n/norm(n)*10^(-dB/20)*norm(x);  % scale noise power
x1=x+n;  % received noisy signal

%estimation using CMA
K=N-L;   %% Discard initial samples for avoiding 0's and negative
X=zeros(L,K);  %each vector
for i=1:K
    X(:,i)=x1(i+L-1:-1:i)';
end
% K=3000;
% X=x1;
%% Weight calculation 
  
for i = -L+1:0
     
w(1,i+L)= (d(i)/z)-(conj(z)-(1/z))*(z.^i)*step(-(i)-1); 
 
w1(1,i+L) =  -z*i*((conj(z)).^((i)-1)) + (i-1)*((conj(z)).^((i)-2)) ;
 
w2(1,i+L)= (-z.^(i)).*step(-(i)-1); 
 
end 
   w=w'; 
w2=w2'; 
% w=flip(w)';
% %w1=conj(w1);
% w2=flip(w2)';
% w1=flip(w1);
% w
% w1
% w2
%% All-pass CMA 
 for i=1:K
          gain=w1*(conj(X(:,i))*X(:,i)')*w + conj(w')*(conj(X(:,i))*(X(:,i)'))*w2;
%         e=((abs(w'*X(:,i))^2)-1);
    z = z - ( mu*((abs(w'*X(:,i))^2)-1) * gain );
    e=(z-z1).^2;
 end
  w=w'; 
w2=w2'; 
%[estCh,res]=zp2tf(z,p,1); 
  
 err=err+(e)^2;
   end 
%  err=err+(z1-z)^2;

MSE = err./MMM;
figure;
q = 0.99;
MSE = filter((1-q),[1 -q],MSE);
hold on; plot((0:length(MSE)-1),10*log10(MSE));
xlabel('n'); 
ylabel('MSE (dB)');
grid on;
figure
% plot of transmitted bits
    subplot(2,2,1), 
    plot(TxS,'*');
    grid on,title('Transmitted bits');  xlabel('real'),ylabel('imaginary')
    axis([-3 3 -3 3])
    
% plot of received symbols  
    subplot(2,2,2),
    plot(x1,'o');
    grid on, title('Received symbols');  xlabel('real'), ylabel('imaginary')
    
    
% %% ISI 
for i = 0:L-1
 h(1,i+1)=z*d(i)+((1/conj(z))-z)*((1/(conj(z)))^i)*step(i); 
end
 p=conv(h,w);
 [M,N]=size(p);
 isis=0;
 for i=1:N
     isis=isis+abs(p(1,i))^2;
 end 
pmax=max(abs(p)^2); 
isi=(isis-pmax)/(pmax)
 
